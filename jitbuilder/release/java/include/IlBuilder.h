/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class IlBuilder */

#ifndef _Included_IlBuilder
#define _Included_IlBuilder
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     IlBuilder
 * Method:    impl_initializeFromImpl
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1initializeFromImpl
  (JNIEnv *, jobject, jlong);

/*
 * Class:     IlBuilder
 * Method:    newJBCase
 * Signature: (IJI)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_newJBCase
  (JNIEnv *, jclass, jint, jlong, jint);

/*
 * Class:     IlBuilder
 * Method:    newJBCondition
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_newJBCondition
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    getClientObj
 * Signature: (J)LIlBuilder;
 */
JNIEXPORT jobject JNICALL Java_IlBuilder_getClientObj
  (JNIEnv *, jclass, jlong);

/*
 * Class:     IlBuilder
 * Method:    setClientObj
 * Signature: (LIlBuilder;J)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_setClientObj
  (JNIEnv *, jclass, jobject, jlong);

/*
 * Class:     IlBuilder
 * Method:    get_IlBuilder_JBCase_ClientObj
 * Signature: (J)LIlBuilder/JBCase;
 */
JNIEXPORT jobject JNICALL Java_IlBuilder_get_1IlBuilder_1JBCase_1ClientObj
  (JNIEnv *, jclass, jlong);

/*
 * Class:     IlBuilder
 * Method:    set_IlBuilder_JBCase_ClientObj
 * Signature: (LIlBuilder/JBCase;J)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_set_1IlBuilder_1JBCase_1ClientObj
  (JNIEnv *, jclass, jobject, jlong);

/*
 * Class:     IlBuilder
 * Method:    get_IlBuilder_JBCondition_ClientObj
 * Signature: (J)LIlBuilder/JBCondition;
 */
JNIEXPORT jobject JNICALL Java_IlBuilder_get_1IlBuilder_1JBCondition_1ClientObj
  (JNIEnv *, jclass, jlong);

/*
 * Class:     IlBuilder
 * Method:    set_IlBuilder_JBCondition_ClientObj
 * Signature: (LIlBuilder/JBCondition;J)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_set_1IlBuilder_1JBCondition_1ClientObj
  (JNIEnv *, jclass, jobject, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_OrphanBuilder
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1OrphanBuilder
  (JNIEnv *, jobject);

/*
 * Class:     IlBuilder
 * Method:    impl_OrphanBytecodeBuilder
 * Signature: (ILjava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1OrphanBytecodeBuilder
  (JNIEnv *, jobject, jint, jstring);

/*
 * Class:     IlBuilder
 * Method:    impl_Copy
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1Copy
  (JNIEnv *, jobject, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_typeDictionary
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1typeDictionary
  (JNIEnv *, jobject);

/*
 * Class:     IlBuilder
 * Method:    impl_ConstInteger
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1ConstInteger
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_ConstAddress
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1ConstAddress
  (JNIEnv *, jobject, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_ConstDouble
 * Signature: (D)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1ConstDouble
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     IlBuilder
 * Method:    impl_ConstFloat
 * Signature: (F)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1ConstFloat
  (JNIEnv *, jobject, jfloat);

/*
 * Class:     IlBuilder
 * Method:    impl_ConstInt8
 * Signature: (B)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1ConstInt8
  (JNIEnv *, jobject, jbyte);

/*
 * Class:     IlBuilder
 * Method:    impl_ConstInt16
 * Signature: (S)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1ConstInt16
  (JNIEnv *, jobject, jshort);

/*
 * Class:     IlBuilder
 * Method:    impl_ConstInt32
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1ConstInt32
  (JNIEnv *, jobject, jint);

/*
 * Class:     IlBuilder
 * Method:    impl_ConstInt64
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1ConstInt64
  (JNIEnv *, jobject, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_ConstString
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1ConstString
  (JNIEnv *, jobject, jstring);

/*
 * Class:     IlBuilder
 * Method:    impl_NullAddress
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1NullAddress
  (JNIEnv *, jobject);

/*
 * Class:     IlBuilder
 * Method:    impl_Add
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1Add
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_AddWithOverflow
 * Signature: (JJJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1AddWithOverflow
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_AddWithUnsignedOverflow
 * Signature: (JJJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1AddWithUnsignedOverflow
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_And
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1And
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_Div
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1Div
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_UnsignedDiv
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1UnsignedDiv
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_IndexAt
 * Signature: (JJJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1IndexAt
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_Mul
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1Mul
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_MulWithOverflow
 * Signature: (JJJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1MulWithOverflow
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_Negate
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1Negate
  (JNIEnv *, jobject, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_Or
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1Or
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_Rem
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1Rem
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_UnsignedRem
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1UnsignedRem
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_ShiftL
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1ShiftL
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_ShiftR
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1ShiftR
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_Sub
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1Sub
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_SubWithOverflow
 * Signature: (JJJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1SubWithOverflow
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_SubWithUnsignedOverflow
 * Signature: (JJJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1SubWithUnsignedOverflow
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_UnsignedShiftR
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1UnsignedShiftR
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_Xor
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1Xor
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_EqualTo
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1EqualTo
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_LessOrEqualTo
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1LessOrEqualTo
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_LessThan
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1LessThan
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_GreaterOrEqualTo
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1GreaterOrEqualTo
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_GreaterThan
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1GreaterThan
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_NotEqualTo
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1NotEqualTo
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_UnsignedLessOrEqualTo
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1UnsignedLessOrEqualTo
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_UnsignedLessThan
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1UnsignedLessThan
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_UnsignedGreaterOrEqualTo
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1UnsignedGreaterOrEqualTo
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_UnsignedGreaterThan
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1UnsignedGreaterThan
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_ConvertBitsTo
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1ConvertBitsTo
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_ConvertTo
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1ConvertTo
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_UnsignedConvertTo
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1UnsignedConvertTo
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_AtomicAdd
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1AtomicAdd
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_CreateLocalArray
 * Signature: (IJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1CreateLocalArray
  (JNIEnv *, jobject, jint, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_CreateLocalStruct
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1CreateLocalStruct
  (JNIEnv *, jobject, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_Load
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1Load
  (JNIEnv *, jobject, jstring);

/*
 * Class:     IlBuilder
 * Method:    impl_LoadAt
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1LoadAt
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_LoadIndirect
 * Signature: (Ljava/lang/String;Ljava/lang/String;J)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1LoadIndirect
  (JNIEnv *, jobject, jstring, jstring, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_Store
 * Signature: (Ljava/lang/String;J)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1Store
  (JNIEnv *, jobject, jstring, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_StoreAt
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1StoreAt
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_StoreIndirect
 * Signature: (Ljava/lang/String;Ljava/lang/String;JJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1StoreIndirect
  (JNIEnv *, jobject, jstring, jstring, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_StoreOver
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1StoreOver
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_Transaction
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1Transaction
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_TransactionAbort
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1TransactionAbort
  (JNIEnv *, jobject);

/*
 * Class:     IlBuilder
 * Method:    impl_StructFieldInstanceAddress
 * Signature: (Ljava/lang/String;Ljava/lang/String;J)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1StructFieldInstanceAddress
  (JNIEnv *, jobject, jstring, jstring, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_UnionFieldInstanceAddress
 * Signature: (Ljava/lang/String;Ljava/lang/String;J)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1UnionFieldInstanceAddress
  (JNIEnv *, jobject, jstring, jstring, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_VectorLoad
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1VectorLoad
  (JNIEnv *, jobject, jstring);

/*
 * Class:     IlBuilder
 * Method:    impl_VectorLoadAt
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1VectorLoadAt
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_VectorStore
 * Signature: (Ljava/lang/String;J)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1VectorStore
  (JNIEnv *, jobject, jstring, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_VectorStoreAt
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1VectorStoreAt
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_AppendBuilder
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1AppendBuilder
  (JNIEnv *, jobject, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_CallWithArgArray
 * Signature: (Ljava/lang/String;I[J)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1CallWithArgArray
  (JNIEnv *, jobject, jstring, jint, jlongArray);

/*
 * Class:     IlBuilder
 * Method:    impl_CallMethodBuilder
 * Signature: (JI[J)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1CallMethodBuilder
  (JNIEnv *, jobject, jlong, jint, jlongArray);

/*
 * Class:     IlBuilder
 * Method:    impl_ComputedCallWithArgArray
 * Signature: (Ljava/lang/String;I[J)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1ComputedCallWithArgArray
  (JNIEnv *, jobject, jstring, jint, jlongArray);

/*
 * Class:     IlBuilder
 * Method:    impl_DoWhileLoop
 * Signature: (Ljava/lang/String;J)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1DoWhileLoop
  (JNIEnv *, jobject, jstring, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_DoWhileLoopWithBreakAndContinue
 * Signature: (Ljava/lang/String;JJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1DoWhileLoopWithBreakAndContinue
  (JNIEnv *, jobject, jstring, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_DoWhileLoopWithBreak
 * Signature: (Ljava/lang/String;JJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1DoWhileLoopWithBreak
  (JNIEnv *, jobject, jstring, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_DoWhileLoopWithContinue
 * Signature: (Ljava/lang/String;JJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1DoWhileLoopWithContinue
  (JNIEnv *, jobject, jstring, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_Goto
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1Goto
  (JNIEnv *, jobject, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_MakeCondition
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1MakeCondition
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_IfAndWithArgArray
 * Signature: (JJI[J)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1IfAndWithArgArray
  (JNIEnv *, jobject, jlong, jlong, jint, jlongArray);

/*
 * Class:     IlBuilder
 * Method:    impl_IfCmpEqual
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1IfCmpEqual
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_IfCmpLessOrEqual
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1IfCmpLessOrEqual
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_IfCmpLessThan
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1IfCmpLessThan
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_IfCmpGreaterOrEqual
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1IfCmpGreaterOrEqual
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_IfCmpGreaterThan
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1IfCmpGreaterThan
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_IfCmpNotEqual
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1IfCmpNotEqual
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_IfCmpUnsignedLessOrEqual
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1IfCmpUnsignedLessOrEqual
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_IfCmpUnsignedLessThan
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1IfCmpUnsignedLessThan
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_IfCmpUnsignedGreaterOrEqual
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1IfCmpUnsignedGreaterOrEqual
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_IfCmpUnsignedGreaterThan
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1IfCmpUnsignedGreaterThan
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_IfCmpEqualZero
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1IfCmpEqualZero
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_IfCmpNotEqualZero
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1IfCmpNotEqualZero
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_IfOrWithArgArray
 * Signature: (JJI[J)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1IfOrWithArgArray
  (JNIEnv *, jobject, jlong, jlong, jint, jlongArray);

/*
 * Class:     IlBuilder
 * Method:    impl_IfThen
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1IfThen
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_IfThenElse
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1IfThenElse
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_ForLoop
 * Signature: (ZLjava/lang/String;JJJJJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1ForLoop
  (JNIEnv *, jobject, jboolean, jstring, jlong, jlong, jlong, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_ForLoopDown
 * Signature: (Ljava/lang/String;JJJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1ForLoopDown
  (JNIEnv *, jobject, jstring, jlong, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_ForLoopUp
 * Signature: (Ljava/lang/String;JJJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1ForLoopUp
  (JNIEnv *, jobject, jstring, jlong, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_ForLoopWithBreak
 * Signature: (ZLjava/lang/String;JJJJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1ForLoopWithBreak
  (JNIEnv *, jobject, jboolean, jstring, jlong, jlong, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_ForLoopWithContinue
 * Signature: (ZLjava/lang/String;JJJJJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1ForLoopWithContinue
  (JNIEnv *, jobject, jboolean, jstring, jlong, jlong, jlong, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_Return
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1Return
  (JNIEnv *, jobject);

/*
 * Class:     IlBuilder
 * Method:    impl_ReturnValue
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1ReturnValue
  (JNIEnv *, jobject, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_SwitchWithArgArray
 * Signature: (Ljava/lang/String;JI[J)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1SwitchWithArgArray
  (JNIEnv *, jobject, jstring, jlong, jint, jlongArray);

/*
 * Class:     IlBuilder
 * Method:    impl_TableSwitchWithArgArray
 * Signature: (Ljava/lang/String;JZI[J)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1TableSwitchWithArgArray
  (JNIEnv *, jobject, jstring, jlong, jboolean, jint, jlongArray);

/*
 * Class:     IlBuilder
 * Method:    impl_MakeCase
 * Signature: (IJI)J
 */
JNIEXPORT jlong JNICALL Java_IlBuilder_impl_1MakeCase
  (JNIEnv *, jobject, jint, jlong, jint);

/*
 * Class:     IlBuilder
 * Method:    impl_WhileDoLoop
 * Signature: (Ljava/lang/String;J)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1WhileDoLoop
  (JNIEnv *, jobject, jstring, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_WhileDoLoopWithBreak
 * Signature: (Ljava/lang/String;JJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1WhileDoLoopWithBreak
  (JNIEnv *, jobject, jstring, jlong, jlong);

/*
 * Class:     IlBuilder
 * Method:    impl_WhileDoLoopWithContinue
 * Signature: (Ljava/lang/String;JJ)V
 */
JNIEXPORT void JNICALL Java_IlBuilder_impl_1WhileDoLoopWithContinue
  (JNIEnv *, jobject, jstring, jlong, jlong);

#ifdef __cplusplus
}
#endif
#endif
