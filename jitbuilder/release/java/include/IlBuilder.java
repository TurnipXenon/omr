/*******************************************************************************
 * Copyright (c) 2019, 2019 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at http://eclipse.org/legal/epl-2.0
 * or the Apache License, Version 2.0 which accompanies this distribution
 * and is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License, v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception [1] and GNU General Public
 * License, version 2 with the OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

/*
 * This file is automatically generated. Do not modify!!
 */

package java.include;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.*;
import sun.misc.Unsafe;
// import jdk.internal.org.objectweb.asm.*;
// import static jdk.internal.org.objectweb.asm.Opcodes.*;

public class IlBuilder {

    public class JBCase {

        JBCase(long impl) {
            impl_initializeFromImpl(impl);
        }

        public JBCase(int caseValue, IlBuilder caseBuilder, int caseFallsThrough) {
            _impl = newJBCase(caseValue, (caseBuilder != null ? caseBuilder._impl : 0L), caseFallsThrough);
            impl_initializeFromImpl(_impl);
            IlBuilder.set_IlBuilder_JBCase_ClientObj(this, _impl);
        }

        private native void impl_initializeFromImpl(long impl);

        long _impl;
    }

    public class JBCondition {

        JBCondition(long impl) {
            impl_initializeFromImpl(impl);
        }

        public JBCondition(IlBuilder conditionBuilder, IlValue conditionValue) {
            _impl = newJBCondition((conditionBuilder != null ? conditionBuilder._impl : 0L),
                    (conditionValue != null ? conditionValue._impl : 0L));
            impl_initializeFromImpl(_impl);
            IlBuilder.set_IlBuilder_JBCondition_ClientObj(this, _impl);
        }

        private native void impl_initializeFromImpl(long impl);

        long _impl;
    }

    IlBuilder(long impl) {
        impl_initializeFromImpl(impl);
    }

    public IlBuilder OrphanBuilder() {
        long implRet = impl_OrphanBuilder();
        IlBuilder clientRet = null;
        if (implRet != 0L) {
            clientRet = IlBuilder.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlBuilder(implRet);
            }
        }
        return clientRet;
    }

    public BytecodeBuilder OrphanBytecodeBuilder(int bcIndex, String name) {
        long implRet = impl_OrphanBytecodeBuilder(bcIndex, name);
        BytecodeBuilder clientRet = null;
        if (implRet != 0L) {
            clientRet = BytecodeBuilder.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new BytecodeBuilder(implRet);
            }
        }
        return clientRet;
    }

    public IlValue Copy(IlValue value) {
        long implRet = impl_Copy((value != null ? value._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public TypeDictionary typeDictionary() {
        long implRet = impl_typeDictionary();
        TypeDictionary clientRet = null;
        if (implRet != 0L) {
            clientRet = TypeDictionary.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new TypeDictionary(implRet);
            }
        }
        return clientRet;
    }

    public IlValue ConstInteger(IlType type, long value) {
        long implRet = impl_ConstInteger((type != null ? type._impl : 0L), value);
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue ConstAddress(long value) {
        long implRet = impl_ConstAddress(value);
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue ConstDouble(double value) {
        long implRet = impl_ConstDouble(value);
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue ConstFloat(float value) {
        long implRet = impl_ConstFloat(value);
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue ConstInt8(byte value) {
        long implRet = impl_ConstInt8(value);
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue ConstInt16(short value) {
        long implRet = impl_ConstInt16(value);
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue ConstInt32(int value) {
        long implRet = impl_ConstInt32(value);
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue ConstInt64(long value) {
        long implRet = impl_ConstInt64(value);
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue ConstString(String value) {
        long implRet = impl_ConstString(value);
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue NullAddress() {
        long implRet = impl_NullAddress();
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue Add(IlValue left, IlValue right) {
        long implRet = impl_Add((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue AddWithOverflow(IlBuilder overflowHandler, IlValue left, IlValue right) {
        long implRet = impl_AddWithOverflow((overflowHandler != null ? overflowHandler._impl : 0L),
                (left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue AddWithUnsignedOverflow(IlBuilder overflowHandler, IlValue left, IlValue right) {
        long implRet = impl_AddWithUnsignedOverflow((overflowHandler != null ? overflowHandler._impl : 0L),
                (left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue And(IlValue left, IlValue right) {
        long implRet = impl_And((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue Div(IlValue left, IlValue right) {
        long implRet = impl_Div((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue UnsignedDiv(IlValue left, IlValue right) {
        long implRet = impl_UnsignedDiv((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue IndexAt(IlType dt, IlValue base, IlValue index) {
        long implRet = impl_IndexAt((dt != null ? dt._impl : 0L), (base != null ? base._impl : 0L),
                (index != null ? index._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue Mul(IlValue left, IlValue right) {
        long implRet = impl_Mul((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue MulWithOverflow(IlBuilder overflowHandler, IlValue left, IlValue right) {
        long implRet = impl_MulWithOverflow((overflowHandler != null ? overflowHandler._impl : 0L),
                (left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue Negate(IlValue v) {
        long implRet = impl_Negate((v != null ? v._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue Or(IlValue left, IlValue right) {
        long implRet = impl_Or((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue Rem(IlValue left, IlValue right) {
        long implRet = impl_Rem((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue UnsignedRem(IlValue left, IlValue right) {
        long implRet = impl_UnsignedRem((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue ShiftL(IlValue left, IlValue right) {
        long implRet = impl_ShiftL((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue ShiftR(IlValue left, IlValue right) {
        long implRet = impl_ShiftR((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue Sub(IlValue left, IlValue right) {
        long implRet = impl_Sub((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue SubWithOverflow(IlBuilder overflowHandler, IlValue left, IlValue right) {
        long implRet = impl_SubWithOverflow((overflowHandler != null ? overflowHandler._impl : 0L),
                (left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue SubWithUnsignedOverflow(IlBuilder overflowHandler, IlValue left, IlValue right) {
        long implRet = impl_SubWithUnsignedOverflow((overflowHandler != null ? overflowHandler._impl : 0L),
                (left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue UnsignedShiftR(IlValue left, IlValue right) {
        long implRet = impl_UnsignedShiftR((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue Xor(IlValue left, IlValue right) {
        long implRet = impl_Xor((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue EqualTo(IlValue left, IlValue right) {
        long implRet = impl_EqualTo((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue LessOrEqualTo(IlValue left, IlValue right) {
        long implRet = impl_LessOrEqualTo((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue LessThan(IlValue left, IlValue right) {
        long implRet = impl_LessThan((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue GreaterOrEqualTo(IlValue left, IlValue right) {
        long implRet = impl_GreaterOrEqualTo((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue GreaterThan(IlValue left, IlValue right) {
        long implRet = impl_GreaterThan((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue NotEqualTo(IlValue left, IlValue right) {
        long implRet = impl_NotEqualTo((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue UnsignedLessOrEqualTo(IlValue left, IlValue right) {
        long implRet = impl_UnsignedLessOrEqualTo((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue UnsignedLessThan(IlValue left, IlValue right) {
        long implRet = impl_UnsignedLessThan((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue UnsignedGreaterOrEqualTo(IlValue left, IlValue right) {
        long implRet = impl_UnsignedGreaterOrEqualTo((left != null ? left._impl : 0L),
                (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue UnsignedGreaterThan(IlValue left, IlValue right) {
        long implRet = impl_UnsignedGreaterThan((left != null ? left._impl : 0L), (right != null ? right._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue ConvertBitsTo(IlType type, IlValue value) {
        long implRet = impl_ConvertBitsTo((type != null ? type._impl : 0L), (value != null ? value._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue ConvertTo(IlType type, IlValue value) {
        long implRet = impl_ConvertTo((type != null ? type._impl : 0L), (value != null ? value._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue UnsignedConvertTo(IlType type, IlValue value) {
        long implRet = impl_UnsignedConvertTo((type != null ? type._impl : 0L), (value != null ? value._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue AtomicAdd(IlValue baseAddress, IlValue value) {
        long implRet = impl_AtomicAdd((baseAddress != null ? baseAddress._impl : 0L),
                (value != null ? value._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue CreateLocalArray(int numElements, IlType elementType) {
        long implRet = impl_CreateLocalArray(numElements, (elementType != null ? elementType._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue CreateLocalStruct(IlType structType) {
        long implRet = impl_CreateLocalStruct((structType != null ? structType._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue Load(String name) {
        long implRet = impl_Load(name);
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue LoadAt(IlType type, IlValue address) {
        long implRet = impl_LoadAt((type != null ? type._impl : 0L), (address != null ? address._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue LoadIndirect(String type, String field, IlValue object) {
        long implRet = impl_LoadIndirect(type, field, (object != null ? object._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public void Store(String name, IlValue value) {
        impl_Store(name, (value != null ? value._impl : 0L));
    }

    public void StoreAt(IlValue address, IlValue value) {
        impl_StoreAt((address != null ? address._impl : 0L), (value != null ? value._impl : 0L));
    }

    public void StoreIndirect(String type, String field, IlValue object, IlValue value) {
        impl_StoreIndirect(type, field, (object != null ? object._impl : 0L), (value != null ? value._impl : 0L));
    }

    public void StoreOver(IlValue dest, IlValue value) {
        impl_StoreOver((dest != null ? dest._impl : 0L), (value != null ? value._impl : 0L));
    }

    public void Transaction(IlBuilder persistentFailureBuilder, IlBuilder transientFailureBuilder,
            IlBuilder transactionBuilder) {
        impl_Transaction((persistentFailureBuilder != null ? persistentFailureBuilder._impl : 0L),
                (transientFailureBuilder != null ? transientFailureBuilder._impl : 0L),
                (transactionBuilder != null ? transactionBuilder._impl : 0L));
    }

    public void TransactionAbort() {
        impl_TransactionAbort();
    }

    public IlValue StructFieldInstanceAddress(String structName, String fieldName, IlValue obj) {
        long implRet = impl_StructFieldInstanceAddress(structName, fieldName, (obj != null ? obj._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue UnionFieldInstanceAddress(String unionName, String fieldName, IlValue obj) {
        long implRet = impl_UnionFieldInstanceAddress(unionName, fieldName, (obj != null ? obj._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue VectorLoad(String name) {
        long implRet = impl_VectorLoad(name);
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue VectorLoadAt(IlType type, IlValue address) {
        long implRet = impl_VectorLoadAt((type != null ? type._impl : 0L), (address != null ? address._impl : 0L));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public void VectorStore(String name, IlValue value) {
        impl_VectorStore(name, (value != null ? value._impl : 0L));
    }

    public void VectorStoreAt(IlValue address, IlValue value) {
        impl_VectorStoreAt((address != null ? address._impl : 0L), (value != null ? value._impl : 0L));
    }

    public void AppendBuilder(IlBuilder b) {
        impl_AppendBuilder((b != null ? b._impl : 0L));
    }

    public IlValue Call(String name, int numArgs, IlValue[] arguments) {
        long implRet = impl_CallWithArgArray(name, numArgs, transformArray(arguments));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue Call(MethodBuilder name, int numArgs, IlValue[] arguments) {
        long implRet = impl_CallMethodBuilder((name != null ? name._impl : 0L), numArgs, transformArray(arguments));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public IlValue ComputedCall(String name, int numArgs, IlValue[] arguments) {
        long implRet = impl_ComputedCallWithArgArray(name, numArgs, transformArray(arguments));
        IlValue clientRet = null;
        if (implRet != 0L) {
            clientRet = IlValue.getClientObj(implRet);
            if (clientRet == null) {
                clientRet = new IlValue(implRet);
            }
        }
        return clientRet;
    }

    public void DoWhileLoop(String exitCondition, IlBuilder body) {
        impl_DoWhileLoop(exitCondition, (body != null ? body._impl : 0L));
    }

    public void DoWhileLoop(String exitCondition, IlBuilder body, IlBuilder breakBuilder, IlBuilder continueBuilder) {
        impl_DoWhileLoopWithBreakAndContinue(exitCondition, (body != null ? body._impl : 0L),
                (breakBuilder != null ? breakBuilder._impl : 0L),
                (continueBuilder != null ? continueBuilder._impl : 0L));
    }

    public void DoWhileLoopWithBreak(String exitCondition, IlBuilder body, IlBuilder breakBuilder) {
        impl_DoWhileLoopWithBreak(exitCondition, (body != null ? body._impl : 0L),
                (breakBuilder != null ? breakBuilder._impl : 0L));
    }

    public void DoWhileLoopWithContinue(String exitCondition, IlBuilder body, IlBuilder continueBuilder) {
        impl_DoWhileLoopWithContinue(exitCondition, (body != null ? body._impl : 0L),
                (continueBuilder != null ? continueBuilder._impl : 0L));
    }

    public void Goto(IlBuilder b) {
        impl_Goto((b != null ? b._impl : 0L));
    }

    public JBCondition MakeCondition(IlBuilder conditionBuilder, IlValue conditionValue) {
        long implRet = impl_MakeCondition((conditionBuilder != null ? conditionBuilder._impl : 0L),
                (conditionValue != null ? conditionValue._impl : 0L));
        JBCondition clientRet = null;
        if (implRet != 0L) {
            clientRet = IlBuilder.get_IlBuilder_JBCondition_ClientObj(implRet);
            if (clientRet == null) {
                clientRet = new JBCondition(implRet);
            }
        }
        return clientRet;
    }

    public void IfAnd(IlBuilder allTrueBuilder, IlBuilder anyFalseBuilder, int numTerms, JBCondition[] terms) {
        impl_IfAndWithArgArray((allTrueBuilder != null ? allTrueBuilder._impl : 0L),
                (anyFalseBuilder != null ? anyFalseBuilder._impl : 0L), numTerms, transformArray(terms));
    }

    public void IfCmpEqual(IlBuilder target, IlValue left, IlValue right) {
        impl_IfCmpEqual((target != null ? target._impl : 0L), (left != null ? left._impl : 0L),
                (right != null ? right._impl : 0L));
    }

    public void IfCmpLessOrEqual(IlBuilder target, IlValue left, IlValue right) {
        impl_IfCmpLessOrEqual((target != null ? target._impl : 0L), (left != null ? left._impl : 0L),
                (right != null ? right._impl : 0L));
    }

    public void IfCmpLessThan(IlBuilder target, IlValue left, IlValue right) {
        impl_IfCmpLessThan((target != null ? target._impl : 0L), (left != null ? left._impl : 0L),
                (right != null ? right._impl : 0L));
    }

    public void IfCmpGreaterOrEqual(IlBuilder target, IlValue left, IlValue right) {
        impl_IfCmpGreaterOrEqual((target != null ? target._impl : 0L), (left != null ? left._impl : 0L),
                (right != null ? right._impl : 0L));
    }

    public void IfCmpGreaterThan(IlBuilder target, IlValue left, IlValue right) {
        impl_IfCmpGreaterThan((target != null ? target._impl : 0L), (left != null ? left._impl : 0L),
                (right != null ? right._impl : 0L));
    }

    public void IfCmpNotEqual(IlBuilder target, IlValue left, IlValue right) {
        impl_IfCmpNotEqual((target != null ? target._impl : 0L), (left != null ? left._impl : 0L),
                (right != null ? right._impl : 0L));
    }

    public void IfCmpUnsignedLessOrEqual(IlBuilder target, IlValue left, IlValue right) {
        impl_IfCmpUnsignedLessOrEqual((target != null ? target._impl : 0L), (left != null ? left._impl : 0L),
                (right != null ? right._impl : 0L));
    }

    public void IfCmpUnsignedLessThan(IlBuilder target, IlValue left, IlValue right) {
        impl_IfCmpUnsignedLessThan((target != null ? target._impl : 0L), (left != null ? left._impl : 0L),
                (right != null ? right._impl : 0L));
    }

    public void IfCmpUnsignedGreaterOrEqual(IlBuilder target, IlValue left, IlValue right) {
        impl_IfCmpUnsignedGreaterOrEqual((target != null ? target._impl : 0L), (left != null ? left._impl : 0L),
                (right != null ? right._impl : 0L));
    }

    public void IfCmpUnsignedGreaterThan(IlBuilder target, IlValue left, IlValue right) {
        impl_IfCmpUnsignedGreaterThan((target != null ? target._impl : 0L), (left != null ? left._impl : 0L),
                (right != null ? right._impl : 0L));
    }

    public void IfCmpEqualZero(IlBuilder target, IlValue condition) {
        impl_IfCmpEqualZero((target != null ? target._impl : 0L), (condition != null ? condition._impl : 0L));
    }

    public void IfCmpNotEqualZero(IlBuilder target, IlValue condition) {
        impl_IfCmpNotEqualZero((target != null ? target._impl : 0L), (condition != null ? condition._impl : 0L));
    }

    public void IfOr(IlBuilder anyTrueBuilder, IlBuilder allFalseBuilder, int numTerms, JBCondition[] terms) {
        impl_IfOrWithArgArray((anyTrueBuilder != null ? anyTrueBuilder._impl : 0L),
                (allFalseBuilder != null ? allFalseBuilder._impl : 0L), numTerms, transformArray(terms));
    }

    public void IfThen(IlBuilder thenPath, IlValue condition) {
        impl_IfThen((thenPath != null ? thenPath._impl : 0L), (condition != null ? condition._impl : 0L));
    }

    public void IfThenElse(IlBuilder thenPath, IlBuilder elsePath, IlValue condition) {
        impl_IfThenElse((thenPath != null ? thenPath._impl : 0L), (elsePath != null ? elsePath._impl : 0L),
                (condition != null ? condition._impl : 0L));
    }

    public void ForLoop(boolean countsUp, String indVar, IlBuilder body, IlBuilder breakBuilder,
            IlBuilder continueBuilder, IlValue initial, IlValue iterateWhile, IlValue increment) {
        impl_ForLoop(countsUp, indVar, (body != null ? body._impl : 0L),
                (breakBuilder != null ? breakBuilder._impl : 0L),
                (continueBuilder != null ? continueBuilder._impl : 0L), (initial != null ? initial._impl : 0L),
                (iterateWhile != null ? iterateWhile._impl : 0L), (increment != null ? increment._impl : 0L));
    }

    public void ForLoopDown(String indVar, IlBuilder body, IlValue initial, IlValue iterateWhile, IlValue increment) {
        impl_ForLoopDown(indVar, (body != null ? body._impl : 0L), (initial != null ? initial._impl : 0L),
                (iterateWhile != null ? iterateWhile._impl : 0L), (increment != null ? increment._impl : 0L));
    }

    public void ForLoopUp(String indVar, IlBuilder body, IlValue initial, IlValue iterateWhile, IlValue increment) {
        impl_ForLoopUp(indVar, (body != null ? body._impl : 0L), (initial != null ? initial._impl : 0L),
                (iterateWhile != null ? iterateWhile._impl : 0L), (increment != null ? increment._impl : 0L));
    }

    public void ForLoopWithBreak(boolean countsUp, String indVar, IlBuilder body, IlBuilder breakBuilder,
            IlValue initial, IlValue iterateWhile, IlValue increment) {
        impl_ForLoopWithBreak(countsUp, indVar, (body != null ? body._impl : 0L),
                (breakBuilder != null ? breakBuilder._impl : 0L), (initial != null ? initial._impl : 0L),
                (iterateWhile != null ? iterateWhile._impl : 0L), (increment != null ? increment._impl : 0L));
    }

    public void ForLoopWithContinue(boolean countsUp, String indVar, IlBuilder body, IlBuilder continueBuilder,
            IlValue initial, IlValue iterateWhile, IlValue increment) {
        impl_ForLoopWithContinue(countsUp, indVar, (body != null ? body._impl : 0L),
                (continueBuilder != null ? continueBuilder._impl : 0L), (initial != null ? initial._impl : 0L),
                (iterateWhile != null ? iterateWhile._impl : 0L), (increment != null ? increment._impl : 0L));
    }

    public void Return() {
        impl_Return();
    }

    public void Return(IlValue value) {
        impl_ReturnValue((value != null ? value._impl : 0L));
    }

    public void Switch(String selectionVar, IlBuilder defaultBuilder, int numCases, JBCase[] cases) {
        impl_SwitchWithArgArray(selectionVar, (defaultBuilder != null ? defaultBuilder._impl : 0L), numCases,
                transformArray(cases));
    }

    public void TableSwitch(String selectionVar, IlBuilder defaultBuilder, boolean generateBoundsCheck, int numCases,
            JBCase[] cases) {
        impl_TableSwitchWithArgArray(selectionVar, (defaultBuilder != null ? defaultBuilder._impl : 0L),
                generateBoundsCheck, numCases, transformArray(cases));
    }

    public JBCase MakeCase(int value, IlBuilder builder, int fallsThrough) {
        long implRet = impl_MakeCase(value, (builder != null ? builder._impl : 0L), fallsThrough);
        JBCase clientRet = null;
        if (implRet != 0L) {
            clientRet = IlBuilder.get_IlBuilder_JBCase_ClientObj(implRet);
            if (clientRet == null) {
                clientRet = new JBCase(implRet);
            }
        }
        return clientRet;
    }

    public void WhileDoLoop(String exitCondition, IlBuilder body) {
        impl_WhileDoLoop(exitCondition, (body != null ? body._impl : 0L));
    }

    public void WhileDoLoopWithBreak(String exitCondition, IlBuilder body, IlBuilder breakBuilder) {
        impl_WhileDoLoopWithBreak(exitCondition, (body != null ? body._impl : 0L),
                (breakBuilder != null ? breakBuilder._impl : 0L));
    }

    public void WhileDoLoopWithContinue(String exitCondition, IlBuilder body, IlBuilder continueBuilder) {
        impl_WhileDoLoopWithContinue(exitCondition, (body != null ? body._impl : 0L),
                (continueBuilder != null ? continueBuilder._impl : 0L));
    }

    private static long[] transformArray(IlValue[] clientArray) {
        long implArray[] = new long[clientArray.length];
        for (int i = 0; i < clientArray.length; i++) {
            IlValue o = clientArray[i];
            implArray[i] = (o != null) ? (o._impl) : 0L;
        }
        return implArray;
    }

    private static long[] transformArray(JBCondition[] clientArray) {
        long implArray[] = new long[clientArray.length];
        for (int i = 0; i < clientArray.length; i++) {
            JBCondition o = clientArray[i];
            implArray[i] = (o != null) ? (o._impl) : 0L;
        }
        return implArray;
    }

    private static long[] transformArray(JBCase[] clientArray) {
        long implArray[] = new long[clientArray.length];
        for (int i = 0; i < clientArray.length; i++) {
            JBCase o = clientArray[i];
            implArray[i] = (o != null) ? (o._impl) : 0L;
        }
        return implArray;
    }

    private native void impl_initializeFromImpl(long impl);

    private static native long newJBCase(int caseValue, long caseBuilder, int caseFallsThrough);

    private static native long newJBCondition(long conditionBuilder, long conditionValue);

    native static IlBuilder getClientObj(long implObj);

    native static void setClientObj(IlBuilder clientObj, long implObj);

    native static JBCase get_IlBuilder_JBCase_ClientObj(long implObj);

    native static void set_IlBuilder_JBCase_ClientObj(JBCase clientObj, long implObj);

    native static JBCondition get_IlBuilder_JBCondition_ClientObj(long implObj);

    native static void set_IlBuilder_JBCondition_ClientObj(JBCondition clientObj, long implObj);

    private native long impl_OrphanBuilder();

    private native long impl_OrphanBytecodeBuilder(int bcIndex, String name);

    private native long impl_Copy(long value);

    private native long impl_typeDictionary();

    private native long impl_ConstInteger(long type, long value);

    private native long impl_ConstAddress(long value);

    private native long impl_ConstDouble(double value);

    private native long impl_ConstFloat(float value);

    private native long impl_ConstInt8(byte value);

    private native long impl_ConstInt16(short value);

    private native long impl_ConstInt32(int value);

    private native long impl_ConstInt64(long value);

    private native long impl_ConstString(String value);

    private native long impl_NullAddress();

    private native long impl_Add(long left, long right);

    private native long impl_AddWithOverflow(long overflowHandler, long left, long right);

    private native long impl_AddWithUnsignedOverflow(long overflowHandler, long left, long right);

    private native long impl_And(long left, long right);

    private native long impl_Div(long left, long right);

    private native long impl_UnsignedDiv(long left, long right);

    private native long impl_IndexAt(long dt, long base, long index);

    private native long impl_Mul(long left, long right);

    private native long impl_MulWithOverflow(long overflowHandler, long left, long right);

    private native long impl_Negate(long v);

    private native long impl_Or(long left, long right);

    private native long impl_Rem(long left, long right);

    private native long impl_UnsignedRem(long left, long right);

    private native long impl_ShiftL(long left, long right);

    private native long impl_ShiftR(long left, long right);

    private native long impl_Sub(long left, long right);

    private native long impl_SubWithOverflow(long overflowHandler, long left, long right);

    private native long impl_SubWithUnsignedOverflow(long overflowHandler, long left, long right);

    private native long impl_UnsignedShiftR(long left, long right);

    private native long impl_Xor(long left, long right);

    private native long impl_EqualTo(long left, long right);

    private native long impl_LessOrEqualTo(long left, long right);

    private native long impl_LessThan(long left, long right);

    private native long impl_GreaterOrEqualTo(long left, long right);

    private native long impl_GreaterThan(long left, long right);

    private native long impl_NotEqualTo(long left, long right);

    private native long impl_UnsignedLessOrEqualTo(long left, long right);

    private native long impl_UnsignedLessThan(long left, long right);

    private native long impl_UnsignedGreaterOrEqualTo(long left, long right);

    private native long impl_UnsignedGreaterThan(long left, long right);

    private native long impl_ConvertBitsTo(long type, long value);

    private native long impl_ConvertTo(long type, long value);

    private native long impl_UnsignedConvertTo(long type, long value);

    private native long impl_AtomicAdd(long baseAddress, long value);

    private native long impl_CreateLocalArray(int numElements, long elementType);

    private native long impl_CreateLocalStruct(long structType);

    private native long impl_Load(String name);

    private native long impl_LoadAt(long type, long address);

    private native long impl_LoadIndirect(String type, String field, long object);

    private native void impl_Store(String name, long value);

    private native void impl_StoreAt(long address, long value);

    private native void impl_StoreIndirect(String type, String field, long object, long value);

    private native void impl_StoreOver(long dest, long value);

    private native void impl_Transaction(long persistentFailureBuilder, long transientFailureBuilder,
            long transactionBuilder);

    private native void impl_TransactionAbort();

    private native long impl_StructFieldInstanceAddress(String structName, String fieldName, long obj);

    private native long impl_UnionFieldInstanceAddress(String unionName, String fieldName, long obj);

    private native long impl_VectorLoad(String name);

    private native long impl_VectorLoadAt(long type, long address);

    private native void impl_VectorStore(String name, long value);

    private native void impl_VectorStoreAt(long address, long value);

    private native void impl_AppendBuilder(long b);

    private native long impl_CallWithArgArray(String name, int numArgs, long[] arguments);

    private native long impl_CallMethodBuilder(long name, int numArgs, long[] arguments);

    private native long impl_ComputedCallWithArgArray(String name, int numArgs, long[] arguments);

    private native void impl_DoWhileLoop(String exitCondition, long body);

    private native void impl_DoWhileLoopWithBreakAndContinue(String exitCondition, long body, long breakBuilder,
            long continueBuilder);

    private native void impl_DoWhileLoopWithBreak(String exitCondition, long body, long breakBuilder);

    private native void impl_DoWhileLoopWithContinue(String exitCondition, long body, long continueBuilder);

    protected native void impl_Goto(long b);

    private native long impl_MakeCondition(long conditionBuilder, long conditionValue);

    private native void impl_IfAndWithArgArray(long allTrueBuilder, long anyFalseBuilder, int numTerms, long[] terms);

    protected native void impl_IfCmpEqual(long target, long left, long right);

    protected native void impl_IfCmpLessOrEqual(long target, long left, long right);

    protected native void impl_IfCmpLessThan(long target, long left, long right);

    protected native void impl_IfCmpGreaterOrEqual(long target, long left, long right);

    protected native void impl_IfCmpGreaterThan(long target, long left, long right);

    protected native void impl_IfCmpNotEqual(long target, long left, long right);

    protected native void impl_IfCmpUnsignedLessOrEqual(long target, long left, long right);

    protected native void impl_IfCmpUnsignedLessThan(long target, long left, long right);

    protected native void impl_IfCmpUnsignedGreaterOrEqual(long target, long left, long right);

    protected native void impl_IfCmpUnsignedGreaterThan(long target, long left, long right);

    protected native void impl_IfCmpEqualZero(long target, long condition);

    protected native void impl_IfCmpNotEqualZero(long target, long condition);

    private native void impl_IfOrWithArgArray(long anyTrueBuilder, long allFalseBuilder, int numTerms, long[] terms);

    private native void impl_IfThen(long thenPath, long condition);

    private native void impl_IfThenElse(long thenPath, long elsePath, long condition);

    private native void impl_ForLoop(boolean countsUp, String indVar, long body, long breakBuilder,
            long continueBuilder, long initial, long iterateWhile, long increment);

    private native void impl_ForLoopDown(String indVar, long body, long initial, long iterateWhile, long increment);

    private native void impl_ForLoopUp(String indVar, long body, long initial, long iterateWhile, long increment);

    private native void impl_ForLoopWithBreak(boolean countsUp, String indVar, long body, long breakBuilder,
            long initial, long iterateWhile, long increment);

    private native void impl_ForLoopWithContinue(boolean countsUp, String indVar, long body, long continueBuilder,
            long initial, long iterateWhile, long increment);

    private native void impl_Return();

    private native void impl_ReturnValue(long value);

    private native void impl_SwitchWithArgArray(String selectionVar, long defaultBuilder, int numCases, long[] cases);

    private native void impl_TableSwitchWithArgArray(String selectionVar, long defaultBuilder,
            boolean generateBoundsCheck, int numCases, long[] cases);

    private native long impl_MakeCase(int value, long builder, int fallsThrough);

    private native void impl_WhileDoLoop(String exitCondition, long body);

    private native void impl_WhileDoLoopWithBreak(String exitCondition, long body, long breakBuilder);

    private native void impl_WhileDoLoopWithContinue(String exitCondition, long body, long continueBuilder);

    protected IlType NoType;
    protected IlType Int8;
    protected IlType Int16;
    protected IlType Int32;
    protected IlType Int64;
    protected IlType Float;
    protected IlType Double;
    protected IlType Address;
    protected IlType VectorInt8;
    protected IlType VectorInt16;
    protected IlType VectorInt32;
    protected IlType VectorInt64;
    protected IlType VectorFloat;
    protected IlType VectorDouble;
    protected IlType Word;
    long _impl;
}